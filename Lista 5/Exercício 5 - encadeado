//implementação do chat usando listas encadeadas com base no que eu havia feito

#include <stdio.h>
#include <stdlib.h>

// Estrutura para armazenar os dados de cada paciente
typedef struct Paciente {
    int h, m, c;               // Hora, minuto, tempo até condição crítica
    struct Paciente *prox;     // Ponteiro para o próximo paciente
} Paciente;

// Função para criar um novo nó da lista encadeada
Paciente* criarPaciente(int h, int m, int c) {
    Paciente *novo = (Paciente*) malloc(sizeof(Paciente));
    if (novo == NULL) {
        printf("Erro ao alocar memória.\n");
        exit(1);
    }
    novo->h = h;
    novo->m = m;
    novo->c = c;
    novo->prox = NULL;
    return novo;
}

// Função para adicionar um paciente ao final da lista encadeada
void adicionarPaciente(Paciente **inicio, int h, int m, int c) {
    Paciente *novo = criarPaciente(h, m, c);
    if (*inicio == NULL) {
        *inicio = novo; // Primeiro nó da lista
    } else {
        Paciente *temp = *inicio;
        while (temp->prox != NULL) {
            temp = temp->prox;
        }
        temp->prox = novo; // Adiciona ao final da lista
    }
}

// Função para processar os pacientes e contar os que atingem condição crítica
int simularAtendimentos(Paciente *inicio) {
    int next_patient = 7 * 60; // Começa às 07h, ou seja, 420 minutos
    int critical = 0;         // Quantidade de pacientes em estado crítico

    Paciente *atual = inicio;
    while (atual != NULL) {
        int arrival = atual->h * 60 + atual->m; // Converte hora/minuto de chegada em minutos
        int critical_time = arrival + atual->c; // Horário em que o paciente entrará em estado crítico

        if (arrival >= next_patient) { // Atendimento imediato
            next_patient = arrival + 30;
        } else { // Aguarda na fila para atendimento
            if (critical_time < next_patient) {
                critical++; // Paciente entrou em estado crítico na fila
            }
            next_patient += 30; // Próximo paciente será atendido em 30 minutos
        }

        atual = atual->prox; // Avança para o próximo paciente
    }

    return critical;
}

// Função para liberar a memória da lista encadeada
void liberarLista(Paciente *inicio) {
    Paciente *temp;
    while (inicio != NULL) {
        temp = inicio;
        inicio = inicio->prox;
        free(temp);
    }
}

// Função principal
int main() {
    Paciente *listaPacientes = NULL;
    int n, h, m, c;

    printf("Entre com o numero de pessoas que chegaram para a triagem: ");
    scanf("%d", &n);

    for (int i = 1; i <= n; i++) {
        printf("Entre com os dados de triagem da pessoa %d: ", i);
        scanf("%d %d %d", &h, &m, &c);
        adicionarPaciente(&listaPacientes, h, m, c);
    }

    int critical = simularAtendimentos(listaPacientes);
    printf("Numero de pessoas que atingem a condicao critica ainda na fila de atendimento: %d\n", critical);

    liberarLista(listaPacientes); // Libera a memória alocada
    return 0;
}
