#include <stdio.h>
#include <stdbool.h>

// Função para verificar se um elemento já está presente no conjunto
bool existeNoConjunto(int conjunto[], int tamanho, int elemento) {
    for (int i = 0; i < tamanho; i++) {
        if (conjunto[i] == elemento) {
            return true;
        }
    }
    return false;
}

// Função para ler os elementos do conjunto com validação
void lerConjunto(int conjunto[], int *tamanho, char nome) {
    int n;
    while (true) {
        printf("Entre com o numero de elementos do conjunto %c: ", nome);
        scanf("%d", &n);
        printf("\n");
        if (n > 0) {
            break;
        } else {
            printf("O numero de elementos do conjunto %c deve ser maior do que zero\n\n", nome);
        }
    }

    printf("Entre com os elementos do conjunto %c:\n", nome);
    for (int i = 0; i < n; i++) {
        int elemento;
        scanf("%d", &elemento);

        // Verifica se o elemento já está no conjunto
        if (!existeNoConjunto(conjunto, *tamanho, elemento)) {
            conjunto[*tamanho] = elemento;
            (*tamanho)++;
        } else {
            printf("O conjunto nao pode ter elementos repetidos. Insira novamente o elemento.\n\n");
            i--; // Mantém o índice para permitir uma nova inserção
        }
    }
}

// Função para exibir o conjunto
void exibirConjunto(int conjunto[], int tamanho, char *nome) {
    printf("\n%s: ", nome);
    if (tamanho == 0) {
        printf("vazio");
    } else {
        for (int i = 0; i < tamanho; i++) {
            printf("%d ", conjunto[i]);
        }
    }
    printf("\n");
}

// Função para calcular a união
int uniao(int A[], int tamanhoA, int B[], int tamanhoB, int resultado[]) {
    int tamanhoResultado = 0;
    for (int i = 0; i < tamanhoA; i++) {
        resultado[tamanhoResultado++] = A[i];
    }
    for (int i = 0; i < tamanhoB; i++) {
        if (!existeNoConjunto(A, tamanhoA, B[i])) {
            resultado[tamanhoResultado++] = B[i];
        }
    }
    return tamanhoResultado;
}

// Função para calcular a interseção
int intersecao(int A[], int tamanhoA, int B[], int tamanhoB, int resultado[]) {
    int tamanhoResultado = 0;
    for (int i = 0; i < tamanhoA; i++) {
        if (existeNoConjunto(B, tamanhoB, A[i])) {
            resultado[tamanhoResultado++] = A[i];
        }
    }
    return tamanhoResultado;
}

// Função para calcular a diferença A - B
int diferenca(int A[], int tamanhoA, int B[], int tamanhoB, int resultado[]) {
    int tamanhoResultado = 0;
    for (int i = 0; i < tamanhoA; i++) {
        if (!existeNoConjunto(B, tamanhoB, A[i])) {
            resultado[tamanhoResultado++] = A[i];
        }
    }
    return tamanhoResultado;
}

int main() {
    int A[100], B[100], uniaoResultado[200], intersecaoResultado[100], diferencaAB[100], diferencaBA[100];
    int tamanhoA = 0, tamanhoB = 0, tamanhoUniao, tamanhoIntersecao, tamanhoDiferencaAB, tamanhoDiferencaBA;

    // Ler os conjuntos A e B
    lerConjunto(A, &tamanhoA, 'A');
    printf("\n");
    lerConjunto(B, &tamanhoB, 'B');
    printf("\n");

    // Calcular e exibir a união
    tamanhoUniao = uniao(A, tamanhoA, B, tamanhoB, uniaoResultado);
    exibirConjunto(uniaoResultado, tamanhoUniao, "Conjunto uniao");

    // Calcular e exibir a interseção
    tamanhoIntersecao = intersecao(A, tamanhoA, B, tamanhoB, intersecaoResultado);
    exibirConjunto(intersecaoResultado, tamanhoIntersecao, "Conjunto intersecao");

    // Calcular e exibir a diferença A - B
    tamanhoDiferencaAB = diferenca(A, tamanhoA, B, tamanhoB, diferencaAB);
    exibirConjunto(diferencaAB, tamanhoDiferencaAB, "Conjunto diferenca entre A e B");

    // Calcular e exibir a diferença B - A
    tamanhoDiferencaBA = diferenca(B, tamanhoB, A, tamanhoA, diferencaBA);
    exibirConjunto(diferencaBA, tamanhoDiferencaBA, "Conjunto diferenca entre B e A");

    return 0;
}
